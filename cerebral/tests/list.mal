type List t =
    | nil () // empty
    | cons (t, List t) // a head element and a tail list

rec map = {
    f (nil ()) => nil (),
    f (cons (x, L)) => cons(f x, map f L),
}

let squares2 = map {x => x * x} (cons (0, cons(1, cons(2, nil ()))))

let square = {x => x * x}

rec range = {
    i j => if i = j then nil () else cons(i, range (i+1) j) end,
}

let first10Squares = map square (range 1 11)

rec mapCps = {
    f (nil ()) k => k (nil ()),
    f (cons (x, L)) k => mapCps f L { L' => k (cons(f x, L')) },
}

let first10Squares = mapCps square (range 1 11) { x => x }

type Tagged =
    | Int int
    | String string

let mapped = map Int first10Squares
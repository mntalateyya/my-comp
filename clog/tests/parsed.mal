type Tree t =
    | leaf ()
    | node (Tree t, t, Tree t)

type List t =
    | nil ()
    | cons (t, List t)

rec map = {
    f (nil ()) => nil (),
    f (cons (x, L)) => cons(f x, map f L),
}


let squares = map {x => x * x} (cons (0, cons(1, cons(2, nil ()))))

rec range = {
    i j => if i = j then nil () else cons(i, range (i+1) j) end,
}

rec filter = {
    f (nil ()) => nil (),
    f (cons (x, L)) => if f x then cons (x, filter f L) else filter f L end,
}

let odds = {
    i => filter {x => x % 2 = 1} (range 0 i),
}

let odds = odds 10

rec reduce = {
    f b (nil ()) => b,
    f b (cons (x, L)) => f x (reduce f b L),
}

rec append = {
    (nil ()) right => right,
    (cons (x, left)) right => cons(x, append (left, right))
}

rec qsort = {
    (nil ()) => nil (),
    cons(x, L) => append (filter {y => y < x} L) (cons (x, filter {y => y > x} L)),
}

rec inorder = {
    (leaf ()) => nil (),
    (node (left, v, right)) => append (inorder left, cons (v, inorder right)),
}

let square = {
    x => x * x
}

let l = cons (2, nil ())
let r = cons (0, nil ())
let (cons (2, cons (0, nil()))) = append l r
let x = inorder (leaf ())
let x = (true, false)
let x = 1 + 2 * 2 - 1 + -3
let x = "a\n\"bcdefg"
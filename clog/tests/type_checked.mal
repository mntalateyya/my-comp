type List t =
    | nil () // empty
    | cons (t, List t) // a head element and a tail list

/* 
 * reduce: (a -> b -> b) -> b -> List a -> b
 */
rec reduce = {
    f b (nil ()) => b,
    f b (cons (x, L)) => f x (reduce f b L),
}

let sum = {L => reduce {x y => x + y} 0 L}
let prod = {L => reduce {x y => x * y} 1 L}

rec map = {
    f (nil ()) => nil (),
    f (cons (x, L)) => cons (f x, map f L),
}

rec range = {
    i j => if i = j then nil () else cons(i, range (i+1) j) end,
}

rec filter = {
    f (nil ()) => nil (),
    f (cons (x, L)) => if f x then cons (x, filter f L) else filter f L end,
}

let odds = {
    i => filter {x => x % 2 = 1} (range 0 i),
}

let odds = odds 10

rec append = {
    (nil (), right) => right,
    (cons (x, left), right) => cons (x, append (left, right))
}

rec qsort = {
    (nil ()) => nil (),
    (cons (x, L)) => append (qsort (filter {y => y < x} L), qsort (cons (x, filter {y => y > x} L))),
}
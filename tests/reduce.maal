type List t =
    | nil ()
    | cons (t, List t)
    ;

rec fn reduce = {
    f b (nil ()) => b,
    f b (cons (x, L)) => f x (reduce f b L),
}

sum = reduce fn {x y => x + y} 0 L;
prod = reduce fn {x y => x * y} 1 L;

rec fn map = {
    f (nil ()) => nil (),
    f (cons (x, L)) => cons (f x, map f L),
}

rec fn range = {
    i j => if i = j then nil () else cons(i, range (i+1) j) end,
}

rec fn filter = {
    f (nil ()) => nil (),
    f (cons (x, L)) => if f x then cons (x, filter f L) else filter f L end,
}

fn odds = {
    i => filter fn {x => x % 2 = 1} (range 0 i),
}

odds = odds 10;
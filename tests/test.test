type Tree t =
    | leaf ()
    | node (Tree t, t, Tree t)
    ;

type List t =
    | nil ()
    | cons (t, List t)
    ;

rec fn append = {
    (nil ()) right => right,
    (cons (x, left)) right => cons(x, append (left, right)),
}

rec fn inorder = {
    (leaf ()) => nil (),
    (node (left, v, right)) => append (inorder left, cons (v, inorder right)),
}

fn square = {
    x => x * x
}

l = cons (2, nil ());
r = cons (0, nil ());
(cons (2, cons (0, nil()))) = append l r;
x = inorder (leaf ());
x = (true, false);
x = 1 + 2 * 2 - 1 + -3;
x = "a\n\"bcdefg";
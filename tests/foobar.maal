type Tree t =
    | leaf ()
    | node (Tree t, t, Tree t)
    ;

type List t =
    | nil ()
    | cons (t, List t)
    ;

fn append =
    | (nil (), right) => right
    | (cons (x, left), right) => cons(x, append (left, right))
    ;

fn inorder =
    | (leaf ()) => nil ()
    | (node (left, v, right)) => append (inorder left, cons (v, inorder right))
    ;

x = inorder (leaf ());
x = (true, false);
x = 1 + 2 * 2 - 1 + -3;
x = "a\n\"bcdefg";
type Tree t =
    | nil ()
    | node (Tree t, t, Tree t)
    ;

type List t =
    | nil ()
    | cons (t, List t)
    ;

fn append =
    | (List.nil (), right) => right
    | (List.cons (x, left), right) => List.cons(x, append (left right))
    ;

fn inorder =
    | Tree.nil () => List.nil ()
    | Tree.node (left, v, right) => append (inorder left, List.cons (v, inorder right))
    ;

x = inorder (Tree.nil ());
x = (true, false);
x = 1 + 2 * 2 - 1 + -3;
x = "a\n\"bcdefg";